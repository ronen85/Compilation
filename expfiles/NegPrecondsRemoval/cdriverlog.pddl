(define (domain cdriverlog)
	(:requirements :typing :durative-actions :fluents)
	(:types location - object locatable - object driver - locatable truck - locatable obj - locatable)
	(:constants driver1 - driver driver2 - driver truck1 - truck truck2 - truck package1 - obj package2 - obj package3 - obj s1 - location s2 - location s3 - location s4 - location p1-2 - location p2-3 - location p1-3 - location p1-4 - location)
	(:functions
		(at-inv ?obj - locatable ?loc - location)
		(in-inv ?obj1 - obj ?obj - truck)
		(driving-inv ?d - driver ?v - truck)
		(link-inv ?x - location ?y - location)
		(path-inv ?x - location ?y - location)
		(empty-inv ?v - truck)
	)
	(:predicates
		(fin ?driver - driver)
		(isnt-fin ?driver - driver)
		(act )
		(failure )
		(at-l ?alocal - driver ?obj - locatable ?loc - location)
		(in-l ?alocal - driver ?obj1 - obj ?obj - truck)
		(driving-l ?alocal - driver ?d - driver ?v - truck)
		(link-l ?alocal - driver ?x - location ?y - location)
		(path-l ?alocal - driver ?x - location ?y - location)
		(empty-l ?alocal - driver ?v - truck)
		(at-g ?obj - locatable ?loc - location)
		(in-g ?obj1 - obj ?obj - truck)
		(driving-g ?d - driver ?v - truck)
		(link-g ?x - location ?y - location)
		(path-g ?x - location ?y - location)
		(empty-g ?v - truck)
		(at-checked ?obj - locatable ?loc - location)
		(at-wt ?alocal - driver ?obj - locatable ?loc - location)
		(at-not-wt ?alocal - driver ?obj - locatable ?loc - location)
	)
(:action end-driver1-s
	:parameters ()
	:precondition (and (isnt-fin driver1) (at-l driver1 truck2 s1) (at-g truck2 s1))
	:effect (and (fin driver1) (not (isnt-fin driver1)) (not (act )))
)
(:action end-driver2-s
	:parameters ()
	:precondition (and (isnt-fin driver2) (at-l driver2 driver2 s1) (at-g driver2 s1) (at-l driver2 truck2 s1) (at-g truck2 s1))
	:effect (and (fin driver2) (not (isnt-fin driver2)) (not (act )))
)
(:action end-driver1-at-f-1
	:parameters ()
	:precondition (and (isnt-fin driver1) (at-l driver1 truck2 s1) (not (at-g truck2 s1)))
	:effect (and (failure ) (fin driver1) (not (isnt-fin driver1)) (not (act )))
)
(:action end-driver2-at-f-2
	:parameters ()
	:precondition (and (isnt-fin driver2) (at-l driver2 driver2 s1) (at-l driver2 truck2 s1) (not (at-g driver2 s1)))
	:effect (and (failure ) (fin driver2) (not (isnt-fin driver2)) (not (act )))
)
(:action end-driver2-at-f-3
	:parameters ()
	:precondition (and (isnt-fin driver2) (at-l driver2 driver2 s1) (at-l driver2 truck2 s1) (not (at-g truck2 s1)))
	:effect (and (failure ) (fin driver2) (not (isnt-fin driver2)) (not (act )))
)
(:durative-action LOAD-TRUCK-s
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?obj ?loc)) (at start (at-g ?obj ?loc)) (at start (= (at-inv ?obj ?loc ) 0  )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (over all (at-g ?truck ?loc)) (at end (act )))
	:effect (and (at start (increase (at-inv ?truck ?loc) 1  )) (at start (not (at-l ?driver ?obj ?loc))) (at start (not (at-g ?obj ?loc))) (at end (in-l ?driver ?obj ?truck)) (at end (in-g ?obj ?truck)) (at end (decrease (at-inv ?truck ?loc) 1  )))
)
(:durative-action UNLOAD-TRUCK-s
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (in-l ?driver ?obj ?truck)) (at start (in-g ?obj ?truck)) (at start (= (in-inv ?obj ?truck ) 0  )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (over all (at-g ?truck ?loc)) (at end (act )) (at start (at-not-wt driver1 ?obj ?loc)) (at start (at-not-wt driver2 ?obj ?loc)) (over all (at-not-wt driver1 ?obj ?loc)) (over all (at-not-wt driver2 ?obj ?loc)) (at end (at-not-wt driver1 ?obj ?loc)) (at end (at-not-wt driver2 ?obj ?loc)))
	:effect (and (at start (increase (at-inv ?truck ?loc) 1  )) (at start (not (in-l ?driver ?obj ?truck))) (at start (not (in-g ?obj ?truck))) (at end (at-l ?driver ?obj ?loc)) (at end (at-g ?obj ?loc)) (at end (decrease (at-inv ?truck ?loc) 1  )))
)
(:durative-action BOARD-TRUCK-s
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (empty-l ?driver ?truck)) (at start (empty-g ?truck)) (at start (at-l ?driver ?driver ?loc)) (at start (at-g ?driver ?loc)) (at start (= (at-inv ?driver ?loc ) 0  )) (at start (= (empty-inv ?truck ) 0  )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (over all (at-g ?truck ?loc)) (at end (act )))
	:effect (and (at start (increase (at-inv ?truck ?loc) 1  )) (at start (not (at-l ?driver ?driver ?loc))) (at start (not (at-g ?driver ?loc))) (at start (not (empty-l ?driver ?truck))) (at start (not (empty-g ?truck))) (at end (driving-l ?driver ?driver ?truck)) (at end (driving-g ?driver ?truck)) (at end (decrease (at-inv ?truck ?loc) 1  )))
)
(:durative-action DISEMBARK-TRUCK-s
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (driving-l ?driver ?driver ?truck)) (at start (driving-g ?driver ?truck)) (at start (= (driving-inv ?driver ?truck ) 0  )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (over all (at-g ?truck ?loc)) (at end (act )) (at start (at-not-wt driver1 ?driver ?loc)) (at start (at-not-wt driver2 ?driver ?loc)) (over all (at-not-wt driver1 ?driver ?loc)) (over all (at-not-wt driver2 ?driver ?loc)) (at end (at-not-wt driver1 ?driver ?loc)) (at end (at-not-wt driver2 ?driver ?loc)))
	:effect (and (at start (increase (at-inv ?truck ?loc) 1  )) (at start (not (driving-l ?driver ?driver ?truck))) (at start (not (driving-g ?driver ?truck))) (at end (at-l ?driver ?driver ?loc)) (at end (at-g ?driver ?loc)) (at end (empty-l ?driver ?truck)) (at end (empty-g ?truck)) (at end (decrease (at-inv ?truck ?loc) 1  )))
)
(:durative-action DRIVE-TRUCK-s
	:parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)
	:duration (= ?duration 10.0)
	:condition (and (at start (act )) (at start (link-l ?driver ?loc-from ?loc-to)) (at start (link-g ?loc-from ?loc-to)) (at start (at-l ?driver ?truck ?loc-from)) (at start (at-g ?truck ?loc-from)) (at start (= (at-inv ?truck ?loc-from ) 0  )) (over all (act )) (over all (driving-l ?driver ?driver ?truck)) (over all (driving-g ?driver ?truck)) (at end (act )) (at start (at-not-wt driver1 ?truck ?loc-to)) (at start (at-not-wt driver2 ?truck ?loc-to)) (over all (at-not-wt driver1 ?truck ?loc-to)) (over all (at-not-wt driver2 ?truck ?loc-to)) (at end (at-not-wt driver1 ?truck ?loc-to)) (at end (at-not-wt driver2 ?truck ?loc-to)))
	:effect (and (at start (increase (driving-inv ?driver ?truck) 1  )) (at start (not (at-l ?driver ?truck ?loc-from))) (at start (not (at-g ?truck ?loc-from))) (at end (at-l ?driver ?truck ?loc-to)) (at end (at-g ?truck ?loc-to)) (at end (decrease (driving-inv ?driver ?truck) 1  )))
)
(:durative-action WALK-s
	:parameters (?driver - driver ?loc-from - location ?loc-to - location)
	:duration (= ?duration 20.0)
	:condition (and (at start (act )) (at start (path-l ?driver ?loc-from ?loc-to)) (at start (path-g ?loc-from ?loc-to)) (at start (at-l ?driver ?driver ?loc-from)) (at start (at-g ?driver ?loc-from)) (at start (= (at-inv ?driver ?loc-from ) 0  )) (over all (act )) (at end (act )) (at start (at-not-wt driver1 ?driver ?loc-to)) (at start (at-not-wt driver2 ?driver ?loc-to)) (over all (at-not-wt driver1 ?driver ?loc-to)) (over all (at-not-wt driver2 ?driver ?loc-to)) (at end (at-not-wt driver1 ?driver ?loc-to)) (at end (at-not-wt driver2 ?driver ?loc-to)))
	:effect (and (at start (not (at-l ?driver ?driver ?loc-from))) (at start (not (at-g ?driver ?loc-from))) (at end (at-l ?driver ?driver ?loc-to)) (at end (at-g ?driver ?loc-to)))
)
(:durative-action UNLOAD-TRUCK-f-start-1
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (in-l ?driver ?obj ?truck)) (at start (not (in-g ?obj ?truck))) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (in-l ?driver ?obj ?truck))) (at end (at-l ?driver ?obj ?loc)))
)
(:durative-action BOARD-TRUCK-f-start-1
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?driver ?loc)) (at start (at-g ?driver ?loc)) (at start (empty-l ?driver ?truck)) (at start (not (empty-g ?truck))) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?driver ?loc))) (at start (not (empty-l ?driver ?truck))) (at end (driving-l ?driver ?driver ?truck)))
)
(:durative-action DISEMBARK-TRUCK-f-start-1
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (driving-l ?driver ?driver ?truck)) (at start (not (driving-g ?driver ?truck))) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (driving-l ?driver ?driver ?truck))) (at end (at-l ?driver ?driver ?loc)) (at end (empty-l ?driver ?truck)))
)
(:durative-action DRIVE-TRUCK-f-start-1
	:parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)
	:duration (= ?duration 10.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?truck ?loc-from)) (at start (at-g ?truck ?loc-from)) (at start (link-l ?driver ?loc-from ?loc-to)) (at start (not (link-g ?loc-from ?loc-to))) (over all (act )) (over all (driving-l ?driver ?driver ?truck)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?truck ?loc-from))) (at end (at-l ?driver ?truck ?loc-to)))
)
(:durative-action WALK-f-start-1
	:parameters (?driver - driver ?loc-from - location ?loc-to - location)
	:duration (= ?duration 20.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?driver ?loc-from)) (at start (at-g ?driver ?loc-from)) (at start (path-l ?driver ?loc-from ?loc-to)) (at start (not (path-g ?loc-from ?loc-to))) (over all (act )) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?driver ?loc-from))) (at end (at-l ?driver ?driver ?loc-to)))
)
(:durative-action LOAD-TRUCK-f-inv-start
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?obj ?loc)) (at start (at-g ?obj ?loc)) (at start (> (at-inv ?obj ?loc) 0 )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?obj ?loc))) (at end (in-l ?driver ?obj ?truck)))
)
(:durative-action UNLOAD-TRUCK-f-inv-start
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (in-l ?driver ?obj ?truck)) (at start (in-g ?obj ?truck)) (at start (> (in-inv ?obj ?truck) 0 )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (in-l ?driver ?obj ?truck))) (at end (at-l ?driver ?obj ?loc)))
)
(:durative-action BOARD-TRUCK-f-inv-start
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (empty-l ?driver ?truck)) (at start (empty-g ?truck)) (at start (at-l ?driver ?driver ?loc)) (at start (at-g ?driver ?loc)) (at start (> (+ (empty-inv ?truck) (at-inv ?driver ?loc) ) 0 )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?driver ?loc))) (at start (not (empty-l ?driver ?truck))) (at end (driving-l ?driver ?driver ?truck)))
)
(:durative-action DISEMBARK-TRUCK-f-inv-start
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (driving-l ?driver ?driver ?truck)) (at start (driving-g ?driver ?truck)) (at start (> (driving-inv ?driver ?truck) 0 )) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (driving-l ?driver ?driver ?truck))) (at end (at-l ?driver ?driver ?loc)) (at end (empty-l ?driver ?truck)))
)
(:durative-action DRIVE-TRUCK-f-inv-start
	:parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)
	:duration (= ?duration 10.0)
	:condition (and (at start (act )) (at start (link-l ?driver ?loc-from ?loc-to)) (at start (link-g ?loc-from ?loc-to)) (at start (at-l ?driver ?truck ?loc-from)) (at start (at-g ?truck ?loc-from)) (at start (> (at-inv ?truck ?loc-from) 0 )) (over all (act )) (over all (driving-l ?driver ?driver ?truck)) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?truck ?loc-from))) (at end (at-l ?driver ?truck ?loc-to)))
)
(:durative-action WALK-f-inv-start
	:parameters (?driver - driver ?loc-from - location ?loc-to - location)
	:duration (= ?duration 20.0)
	:condition (and (at start (act )) (at start (path-l ?driver ?loc-from ?loc-to)) (at start (path-g ?loc-from ?loc-to)) (at start (at-l ?driver ?driver ?loc-from)) (at start (at-g ?driver ?loc-from)) (at start (> (at-inv ?driver ?loc-from) 0 )) (over all (act )) (at end (act )))
	:effect (and (at start (failure )) (at start (not (at-l ?driver ?driver ?loc-from))) (at end (at-l ?driver ?driver ?loc-to)))
)
(:durative-action LOAD-TRUCK-wait-at
	:parameters (?obj - obj ?truck - truck ?loc - location ?driver - driver)
	:duration (= ?duration 2.0)
	:condition (and (at start (act )) (at start (at-l ?driver ?obj ?loc)) (at start (not (at-g ?obj ?loc))) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (at-wt ?driver ?obj ?loc)) (at start (not (at-l ?driver ?obj ?loc))) (at start (not (at-not-wt ?driver ?obj ?loc))) (at end (in-l ?driver ?obj ?truck)))
)
(:durative-action BOARD-TRUCK-wait-at
	:parameters (?driver - driver ?truck - truck ?loc - location)
	:duration (= ?duration 1.0)
	:condition (and (at start (act )) (at start (empty-l ?driver ?truck)) (at start (at-l ?driver ?driver ?loc)) (at start (not (at-g ?driver ?loc))) (over all (act )) (over all (at-l ?driver ?truck ?loc)) (at end (act )))
	:effect (and (at start (failure )) (at start (at-wt ?driver ?driver ?loc)) (at start (not (at-l ?driver ?driver ?loc))) (at start (not (empty-l ?driver ?truck))) (at start (not (at-not-wt ?driver ?driver ?loc))) (at end (driving-l ?driver ?driver ?truck)))
)
(:durative-action DRIVE-TRUCK-wait-at
	:parameters (?truck - truck ?loc-from - location ?loc-to - location ?driver - driver)
	:duration (= ?duration 10.0)
	:condition (and (at start (act )) (at start (link-l ?driver ?loc-from ?loc-to)) (at start (at-l ?driver ?truck ?loc-from)) (at start (not (at-g ?truck ?loc-from))) (over all (act )) (over all (driving-l ?driver ?driver ?truck)) (at end (act )))
	:effect (and (at start (failure )) (at start (at-wt ?driver ?truck ?loc-from)) (at start (not (at-l ?driver ?truck ?loc-from))) (at start (not (at-not-wt ?driver ?truck ?loc-from))) (at end (at-l ?driver ?truck ?loc-to)))
)
(:durative-action WALK-wait-at
	:parameters (?driver - driver ?loc-from - location ?loc-to - location)
	:duration (= ?duration 20.0)
	:condition (and (at start (act )) (at start (path-l ?driver ?loc-from ?loc-to)) (at start (at-l ?driver ?driver ?loc-from)) (at start (not (at-g ?driver ?loc-from))) (over all (act )) (at end (act )))
	:effect (and (at start (failure )) (at start (at-wt ?driver ?driver ?loc-from)) (at start (not (at-l ?driver ?driver ?loc-from))) (at start (not (at-not-wt ?driver ?driver ?loc-from))) (at end (at-l ?driver ?driver ?loc-to)))
)
)